"           _
"    __   _(X)_ __ ___  _ __ ____
"    \ \ / / | '_ ` _ \|X`__/  __|
"  _  \ V /| | | |X| | | |  | (X_
" (_)  \X/ |_|_| |_| |_|_|  \____|
"
" hapidznur's .vimrc file
" https://www.github.com/hapidznur/dotfiles

" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

"-------------------=== Code/Project navigation ===-------------
Plug 'scrooloose/nerdtree'                " Project and file navigation
"Plug 'Xuyuanp/nerdtree-git-plugin'        " NerdTree git functionality
Plug 'tpope/vim-vinegar'                " Open Folder with -
Plug 'qpkorr/vim-bufkill'               " Not close buffer if split
Plug 'ervandew/supertab'                " Autocomplete with tab
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'airblade/vim-gitgutter'
Plug 'godlygeek/tabular'                  " markdown
Plug 'plasticboy/vim-markdown'            " markdown
"Plug 'tpope/vim-vinegar'                  " file and directory navigation
"Plug 'tpope/vim-eunuch'                   " file and directory management
Plug 'ctrlpvim/ctrlp.vim'                 " find file with Ctrl + P
"Plug 'mileszs/ack.vim'                    " Ack
"Plug 'kien/rainbow_parentheses.vim'       " Rainbow Parentheses
Plug 'tpope/vim-fugitive'                 " Git Operation:s
"-------------------=== Other ===-------------------------------
Plug 'itchyny/lightline.vim'              "
Plug 'mengelbrecht/lightline-bufferline'  "
Plug 'itchyny/landscape.vim'              " Theme
Plug 'itchyny/calendar.vim'               " Calendar Coy Cek uripmu ketoto
Plug 'wakatime/vim-wakatime'
"-------------------=== Snippets support ===--------------------
"iPlug 'cakebaker/scss-syntax.vim'          " Sassy CSS
"-------------------=== Languages support ===-------------------
"Plug 'scrooloose/nerdcommenter'           " Easy code documentation
"Plug 'mitsuhiko/vim-sparkup'              " Sparkup(XML/jinja/htlm-django/etc.) support
"-------------------=== Python  ===-----------------------------
"Plug 'tell-k/vim-autopep8'                " autopep8
Plug 'Chiel92/vim-autoformat'             " auto format for python
"-------------------=== JavaScript  ===-----------------------------
Plug 'posva/vim-vue'                      " syntax for vuejs

" All of your Plugins must be added before the following line
call plug#end()            " required

" -----------
" Configuration
" -----------
set autoindent
set autoread
set autowrite
set backspace=indent,eol,start
set cindent
set cinkeys-=0#
set cino=
set commentstring=\ \ #%s
set copyindent
set directory-=.
set encoding=utf8
set expandtab
set fileformats=unix,mac,dos
set fillchars=vert:\ ,stl:\ ,stlnc:\ ,fold:-,diff:┄
set formatoptions=tcqn1 
" t - autowrap normal text
" c - autowrap comments
" q - gq formats comments
" n - autowrap lists
" 1 - break _before_ single-letter words
" 2 - use indenting from 2nd line of para
set hidden
set hlsearch
set linebreak
set nobackup
set nonumber
set notitle
set nowritebackup
set printoptions=paper:letter " US paper
set ruler                   " Show row/col and percentage
set scroll=4                " Number of lines to scroll with ^U/^D
set scrolloff=15            " Keep cursor away from this many chars top/bot
set sessionoptions-=options " Don't save runtimepath in Vim session (see tpope/vim-pathogen docs)
set shiftround              " Shift to certain columns, not just n spaces
set shortmess+=A            " Don't bother me when a swapfile exists
set showbreak=              " Show for lines that have been wrapped, like Emacs
set showmatch               " Hilight matching braces/parens/etc.
set sidescrolloff=3         " Keep cursor away from this many chars left/right
set smartcase       
set shiftwidth=4
set softtabstop=4
set suffixes+=.pyc
set tabstop=4
set visualbell t_vb=
set wildmenu
set wildmode=list:longest,full
set wildignore=".class,~,o,*.pyc,.git,node_modules

" ---- experimental ----
set autochdir
autocmd BufEnter * silent! lcd %:p:h
" use mouse not in insert mode
silent! set foldmethod=marker
silent! set mouse =nvc
silent! nohlsearch
" -------------
" Plugin Konfig
" -------------

" FZF (replaces Ctrl-P, FuzzyFinder and Command-T)
set rtp+=~/.fzf
nmap ; :Buffers<CR>
nmap <Leader>r :Tags<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>a :Ag<CR>
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" In Neovim, you can set up fzf window using a Vim command
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10new' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" Tell ack.vim to use ag (the Silver Searcher) instead
let g:ackprg = 'ag --vimgrep'

" Vim Markdown
let g:vim_markdown_folding_disabled = 1 " folding disabled hardcore
let g:vim_markdown_folding_style_pythonic = 1 " pytonic folding
" Vim-buffkill
"close split using \ + c
nmap <Leader>c :BD<cr>

" NERDTree PLugin
nmap \e :NERDTreeToggle<cr>
" Ignore files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\.pyo$', '__pycache__$']
let NERDTreeWinSize=28
" Load NERDTree only if vim is run without arguments
autocmd VimEnter * if !argc() | NERDTree | endif 
nmap <Leader>f :NERDTreeFind<cr>
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" ======== Theme ======= "
set laststatus=2
set showtabline=2
set guioptions-=e  " Don't use GUI tabline
let g:lightline = {
\   'colorscheme': 'landscape',
\   'active': {
\     'left':[[ 'mode', 'paste' ],
\             [ 'fugitive', 'readonly', 'filename', 'modified' ]],
\   },
\   'component': {
\     'lineinfo': ' %3l:%-2v',
\   },
\   'component_function': {
\     'fugitive': 'LightlineFugitive',
\     'readonly': 'LightlineReadonly',
\     'modified': 'LightlineModified',
\   }
\}
let g:lightline#bufferline#unnamed = "[KOHAKU]"
let g:lightline#bufferline#filename_modifier= ":."
let g:lightline#bufferline#more_buffers = "..."
let g:lightline#bufferline#modified = " +"
let g:lightline#bufferline#read_only = " -"
let g:lightline#bufferline#shorten_path = 1
let g:lightline#bufferline#show_number = 0
let g:lightline.separator = {
\   'left': '', 'right': ''
\}
let g:lightline.subseparator = {
\   'left': '', 'right': ''
\}
let g:lightline.tabline = {
\   'left': [ ['buffers'] ],
\   'right': [ ['string1'], ['string2'] ]
\}
let g:lightline.component_expand = {
\   'buffers': 'lightline#bufferline#buffers'
\}
let g:lightline.component_type = {
\   'buffers': 'tabsel'
\}

function! LightlineModified()
    return &modified ? '●' : ''
endfunction

function! LightlineReadonly()
    return &readonly ? '' : ''
endfunction

function! LightlineFugitive()
    if exists('*fugitive#head')
        let branch = fugitive#head()
        return branch !=# '' ? ' '.branch : ''
    endif
    return ''
endfunction

nmap <Leader>1 <Plug>lightline#bufferline#go(1)
nmap <Leader>2 <Plug>lightline#bufferline#go(2)
nmap <Leader>3 <Plug>lightline#bufferline#go(3)
nmap <Leader>4 <Plug>lightline#bufferline#go(4)
nmap <Leader>5 <Plug>lightline#bufferline#go(5)
nmap <Leader>6 <Plug>lightline#bufferline#go(6)
nmap <Leader>7 <Plug>lightline#bufferline#go(7)
nmap <Leader>8 <Plug>lightline#bufferline#go(8)
nmap <Leader>9 <Plug>lightline#bufferline#go(9)
nmap <Leader>0 <Plug>lightline#bufferline#go(10)

" ---- === Calendar connect to Google == ---- "
let g:calendar_frame = 'default'
let g:calendar_google_calendar = 1
let g:calendar_google_task = 1
let g:calendar_diary=$HOME.'/.vim/diary'
let g:calendar_event_start_time=1

" GitGutter styling to use · instead of +/-
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" Session Manager
let g:session_dir = "~/.vim_session"
exec 'nnoremap <Leader>ss :mks! ' . g:session_dir . '/*.vim<C-D><BS><BS><BS><BS><BS>'
exec 'nnoremap <Leader>sr :so ' . g:session_dir. '/*.vim<C-D><BS><BS><BS><BS><BS>'

" -----------
" Auto Konfig
" -----------
augroup vimrc
    autocmd!
    au BufNewFile,BufRead *.csv     setf csv
    au BufNewFile,BufRead *.ini     setf conf
    au BufNewFile,BufRead *.json    set ft=json tw=0
    au BufNewFile,BufRead *.sass    setf sass
    au BufNewFile,BufRead *.scss    setf scss
    au BufNewFile,BufRead *.xml     setlocal ft=xml  ts=2 sw=2 et
    au BufNewFile,BufRead *.zshrc   setf zsh number
    au BufNewFile,BufRead *.yml,*.yaml setlocal ft=yaml ts=2 sw=2 sts=2
    au BufNewFile,BufRead *.py setlocal ts=4 sw=4 sts=4
    au BufNewFile,BufRead *.blade.php,*.php,*.htm,*.html, setlocal ts=2 sw=2 sts=2
    au BufNewFile,BufRead *.vue,*.js     setlocal ts=2 sw=2 sts=2
    au FileType json setlocal conceallevel=0 foldmethod=syntax foldlevel=999
    au Filetype gitcommit setlocal tw=80
    au FileType gitcommit setlocal nolist ts=4 sts=4 sw=4 noet
    au FileType make setlocal nolist ts=4 sts=4 sw=4 noet
    au FileType vue syntax sync fromstart
augroup END

"
" --------
" Key Maps
" --------
command! Q q
command! W w

" ctrl + s As Save
noremap <silent> <C-S> :update<CR>
vnoremap <silent> <C-S> <C-C>:update<CR>
inoremap <silent> <C-S> <C-O>:update<CR>

" disable indent bawaan dari copy paste
noremap <F8> :setl noai  nocin nosi inde=<CR>

" set buffer shortcut 
nmap ,f :bn<cr>
nmap ,d :bp<cr>
" disable hl
nmap ,<space> :nohlsearch<cr>
" window move
nmap <C-h> <C-w><C-h>
nmap <C-l> <C-w><C-l>
nmap <C-k> <C-w><C-k>
nmap <C-j> <C-w><C-j>
" ----------------
" Local Vim Konfig
" ---------------
if filereadable(expand("~/.vimlocal"))
	source ~/.vimlocal
endif


